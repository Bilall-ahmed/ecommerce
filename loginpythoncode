import json
import boto3

region = 'ap-south-1'
dynamodb_table_name = 'usertable'
user_resource_path = '/user'

dynamodb = boto3.resource('dynamodb', region_name=region)
table = dynamodb.Table(dynamodb_table_name)


def lambda_handler(event, context):
    print('Request event: ', event)
    response = None

    if event['httpMethod'] == 'OPTIONS':
        # For preflight requests, return only CORS headers
        return build_cors_response(200)

    if event['httpMethod'] == 'GET' and event['path'] == user_resource_path:
        response = get_users()
    elif event['httpMethod'] == 'POST' and event['path'] == user_resource_path:
        response = save_user(json.loads(event['body']))
    elif event['httpMethod'] == 'PUT' and event['path'] == user_resource_path:
        response = put_user(json.loads(event['body']))
    elif event['httpMethod'] == 'PATCH' and event['path'] == user_resource_path:
        request_body = json.loads(event['body'])
        response = modify_user(request_body.get('email'), request_body.get('password'))
    elif event['httpMethod'] == 'DELETE' and event['path'] == user_resource_path:
        response = delete_user(json.loads(event['body']).get('email'))
    else:
        response = build_response(404, '404 Not Found')

    # Add CORS headers to the response
    return build_cors_response(response)


def get_users():
    try:
        response = table.scan()
        items = response.get('Items', [])
        body = {'users': items}
        return build_response(200, body)
    except Exception as e:
        print(f'Error fetching users: {e}')
        return build_response(500, 'Internal Server Error')


def save_user(request_body):
    try:
        table.put_item(Item=request_body)
        body = {'Operation': 'SAVE', 'Message': 'SUCCESS', 'User': request_body}
        return build_response(200, body)
    except Exception as e:
        print(f'Error saving user: {e}')
        return build_response(500, 'Internal Server Error')


def put_user(request_body):
    if 'email' not in request_body or 'password' not in request_body:
        return build_response(400, 'Bad Request: Email and Password are required')

    try:
        table.put_item(Item=request_body)
        body = {'Operation': 'PUT', 'Message': 'SUCCESS', 'User': request_body}
        return build_response(200, body)
    except Exception as e:
        print(f'Error putting user: {e}')
        return build_response(500, 'Internal Server Error')


def modify_user(email, password):
    if not email:
        return build_response(400, 'Bad Request: Email is required')

    try:
        # Add your custom logic for modifying the user based on the provided email and password
        # For example, you can update the password
        response = table.update_item(
            Key={'email': email},
            UpdateExpression='set password = :value',
            ExpressionAttributeValues={':value': password},
            ReturnValues='UPDATED_NEW'
        )
        body = {'Operation': 'PATCH', 'Message': 'SUCCESS', 'UpdatedAttributes': response}
        return build_response(200, body)
    except Exception as e:
        print(f'Error modifying user: {e}')
        return build_response(500, 'Internal Server Error')


def delete_user(email):
    if not email:
        return build_response(400, 'Bad Request: Email is required')

    try:
        response = table.delete_item(Key={'email': email}, ReturnValues='ALL_OLD')
        body = {'Operation': 'DELETE', 'Message': 'SUCCESS', 'Item': response}
        return build_response(200, body)
    except Exception as e:
        print(f'Error deleting user: {e}')
        return build_response(500, 'Internal Server Error')


def build_response(status_code, body=None):
    response = {
        'statusCode': status_code,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS, GET, POST, PUT, PATCH, DELETE',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
    }
    if body:
        response['body'] = json.dumps(body)
    return response


def build_cors_response(response):
    # If the response already has headers, add CORS headers
    if 'headers' in response:
        response['headers']['Access-Control-Allow-Origin'] = '*'
        response['headers']['Access-Control-Allow-Methods'] = 'OPTIONS, GET, POST, PUT, PATCH, DELETE'
        response['headers']['Access-Control-Allow-Headers'] = 'Content-Type'
    else:
        # If there are no headers, create new headers with CORS headers
        response['headers'] = {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS, GET, POST, PUT, PATCH, DELETE',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
    return response
